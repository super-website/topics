// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}






model Topics {
  
  id        String   @id @default(uuid()) @map("_id")
  title      String
  short_desc String   @db.String
  long_desc  String   @db.String     
  tags       String[]   
  createdAt  DateTime @default(now())
  subjectId  String?
  subject    Subject?  @relation(fields: [subjectId], references: [id])
}

model Subject {
  
  id        String   @id @default(uuid()) @map("_id")
  name        String   
  short_name  String   @default("Unknown") 
  short_desc  String   
  tags       String[]
  topics      Topics[]  
  classId   String? 
  class     Class?    @relation(fields: [classId], references: [id])
}


model Admin {
  
  id        String   @id @default(cuid()) @map("_id")
  name     String  
  email    String  @unique
  password String  
  role     Role    @default(MANAGER)  

  @@map("admins") 
}

enum Role {
  ADMIN
  MANAGER
  CONTENT_MANAGER
}




model Gallery {

  id        String   @id @default(uuid()) @map("_id")
  title     String
  image    String 
  text      String?
  createdAt DateTime @default(now())
}


model Contact {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}

model pdf {
  id        String   @id @default(uuid()) @map("_id")
  title     String
  url       String
  short_desc String? @db.String
  tags     String[]
  like    Int @default(0)
  createdAt DateTime @default(now())
  download  Int @default(0)
  classId   String?   
  class     Class?    @relation(fields: [classId], references: [id])
}





model Scheme {
  id        String   @id @default(uuid()) @map("_id")
  title     String
  short_desc String @db.String
  tags    String[]
  url String
 createdAt DateTime @default(now())
 reviews  Review[]
  classId   String?   
  class     Class?    @relation(fields: [classId], references: [id])
 
}


model Review {
   id        String   @id @default(uuid()) @map("_id")
   content     String
   name        String
   email       String
   rating      Int
  schemeId   String?
  scheme    Scheme?  @relation(fields: [schemeId], references: [id])
}

model NewsLetter {
  id        String   @id @default(uuid()) @map("_id")
  email       String
  createdAt     DateTime  @default(now())
}




model Class {
  id          String   @id @default(uuid()) @map("_id")
  slug        String   @unique
  title       String
  short_desc  String?  @db.String
  long_desc   String?  @db.String
  pdfs        pdf[]  
  subject      Subject[]
  schemes     Scheme[] 
  papers       Papers[]
}



model User {
  id          String   @id @default(uuid()) @map("_id")
  name        String
  email        String @unique
  password      String
}



model Papers {
  id          String   @id @default(uuid()) @map("_id")
  title       String
  pdf         String
  classId   String?   
  tags    String[]
  class     Class?    @relation(fields: [classId], references: [id])
  description  String?  @db.String
  createdAt   DateTime  @default(now())
}


model articles {
  id          String   @id @default(uuid()) @map("_id")
  slug        String   @unique
  author_name  String?
  title      String
  content    String  @db.String
  like    Int @default(0)
  createdAt   DateTime  @default(now())
}